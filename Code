/* 
--------------------------------------------
Q1: Explain the difference between preemptive and non-preemptive scheduling.


Preemptive scheduling allows a process to be interrupted in the middle of execution so that another process with higher priority or shorter burst time can execute. It enables better response time and fairness in a multitasking system.
Example: Round Robin, Preemptive Priority Scheduling.

Non-preemptive scheduling does not allow interruption of a running process. Once a process starts its execution, it runs to completion. It is simpler but can lead to poor response time.
Example: First Come First Serve (FCFS), Shortest Job First (Non-preemptive).

--------------------------------------------
Q2: Processes, Burst Time, Priority:


| Process | Burst Time | Priority |
|--------|------------|---------|
| P1     | 2          | 2       |
| P2     | 1          | 1       |
| P3     | 8          | 4       |
| P4     | 4          | 2       |
| P5     | 5          | 3       |

**Arrival Time: 0 for all processes**

a. Gantt Charts:

1. FCFS:  | P1 | P2 | P3 | P4 | P5 | 
          0   2   3  11  15  20

2. SJF:   | P2 | P1 | P4 | P5 | P3 |
          0   1   3   7  12  20

3. Priority: | P3 | P5 | P1 | P4 | P2 |
             0   8  13  15  19  20

4. RR (q=2): | P1 | P2 | P3 | P4 | P5 | P3 | P4 | P5 | P3 | P5 | P3 |
              0   2   3   5   7   9  11  13  15  17  18  20

--------------------------------------------
b. Turnaround Time (Completion Time - Arrival Time):

| Process | FCFS TAT | SJF TAT | Priority TAT | RR TAT |
|--------|---------|--------|-------------|-------|
| P1     | 2       | 3      | 15          | 2     |
| P2     | 3       | 1      | 20          | 3     |
| P3     | 11      | 20     | 8           | 20    |
| P4     | 15      | 7      | 19          | 13    |
| P5     | 20      | 12     | 13          | 18    |


c. Waiting Time (Turnaround Time - Burst Time):

| Process | FCFS WT | SJF WT | Priority WT | RR WT |
|--------|--------|------|-----------|------|
| P1     | 0      | 1    | 13        | 0    |
| P2     | 2      | 0    | 19        | 2    |
| P3     | 3      | 12   | 0         | 12   |
| P4     | 11     | 3    | 15        | 9    |
| P5     | 15     | 7    | 8         | 13   |


d. Which algorithm gives minimum average waiting time?
Answer: **Shortest Job First (SJF)** with average waiting time of 4.6 ms.

--------------------------------------------
Q3: Scheduling for P1 (p1=50, t1=25), P2 (p2=75, t2=30):

a. Rate Monotonic Scheduling:
P1 and P2 can be scheduled using RMS if they meet utilization bound and priorities based on periods.
(Suggested to draw Gantt chart in report)

b. Earliest Deadline First (EDF):
Processes scheduled dynamically based on nearest deadline.

--------------------------------------------
Q4: Java Program to calculate FCFS and SJF turnaround/waiting time.

*/

import java.util.*;

class Process {
    int id, burstTime, waitingTime, turnaroundTime;

    Process(int id, int burstTime) {
        this.id = id;
        this.burstTime = burstTime;
    }
}

public class SchedulingAnalysis {

    // Function to calculate waiting and turnaround time for FCFS
    public static void fcfs(Process[] processes) {
        int n = processes.length;
        processes[0].waitingTime = 0;
        processes[0].turnaroundTime = processes[0].burstTime;

        for (int i = 1; i < n; i++) {
            processes[i].waitingTime = processes[i - 1].waitingTime + processes[i - 1].burstTime;
            processes[i].turnaroundTime = processes[i].waitingTime + processes[i].burstTime;
        }

        printResults("FCFS", processes);
    }

    // Function to calculate waiting and turnaround time for SJF
    public static void sjf(Process[] processes) {
        int n = processes.length;
        Arrays.sort(processes, Comparator.comparingInt(p -> p.burstTime)); // Sort by burst time

        processes[0].waitingTime = 0;
        processes[0].turnaroundTime = processes[0].burstTime;

        for (int i = 1; i < n; i++) {
            processes[i].waitingTime = processes[i - 1].waitingTime + processes[i - 1].burstTime;
            processes[i].turnaroundTime = processes[i].waitingTime + processes[i].burstTime;
        }

        printResults("SJF", processes);
    }

    // Function to print results
    public static void printResults(String algoName, Process[] processes) {
        System.out.println("\n---------------- " + algoName + " ----------------");
        System.out.printf("%-10s %-15s %-15s\n", "Process ID", "Waiting Time", "Turnaround Time");

        int totalWaiting = 0, totalTurnaround = 0;
        for (Process p : processes) {
            System.out.printf("%-10d %-15d %-15d\n", p.id, p.waitingTime, p.turnaroundTime);
            totalWaiting += p.waitingTime;
            totalTurnaround += p.turnaroundTime;
        }

        double avgWaiting = (double) totalWaiting / processes.length;
        double avgTurnaround = (double) totalTurnaround / processes.length;

        System.out.println("Average Waiting Time: " + avgWaiting);
        System.out.println("Average Turnaround Time: " + avgTurnaround);
    }

    // Main function
    public static void main(String[] args) {
        // Process list as per question
        Process[] processList1 = {
                new Process(1, 2), // P1
                new Process(2, 1), // P2
                new Process(3, 8), // P3
                new Process(4, 4), // P4
                new Process(5, 5)  // P5
        };

        // Copying process list for separate SJF calculation to avoid in-place sorting affecting FCFS
        Process[] processList2 = {
                new Process(1, 2), // P1
                new Process(2, 1), // P2
                new Process(3, 8), // P3
                new Process(4, 4), // P4
                new Process(5, 5)  // P5
        };

        fcfs(processList1); // FCFS scheduling
        sjf(processList2);  // SJF scheduling
    }
}
